{-# OPTIONS_GHC -fno-warn-unused-binds -fno-warn-missing-signatures #-}
{-# LANGUAGE CPP #-}
{-# LINE 1 "app/Lexer.x" #-}

module Lexer where

#if __GLASGOW_HASKELL__ >= 603
#include "ghcconfig.h"
#elif defined(__GLASGOW_HASKELL__)
#include "config.h"
#endif
#if __GLASGOW_HASKELL__ >= 503
import Data.Array
#else
import Array
#endif
{-# LINE 1 "templates/wrappers.hs" #-}
-- -----------------------------------------------------------------------------
-- Alex wrapper code.
--
-- This code is in the PUBLIC DOMAIN; you may copy it freely and use
-- it for any purpose whatsoever.





import Data.Word (Word8)
















import Data.Char (ord)
import qualified Data.Bits

-- | Encode a Haskell String to a list of Word8 values, in UTF8 format.
utf8Encode :: Char -> [Word8]
utf8Encode = uncurry (:) . utf8Encode'

utf8Encode' :: Char -> (Word8, [Word8])
utf8Encode' c = case go (ord c) of
                  (x, xs) -> (fromIntegral x, map fromIntegral xs)
 where
  go oc
   | oc <= 0x7f       = ( oc
                        , [
                        ])

   | oc <= 0x7ff      = ( 0xc0 + (oc `Data.Bits.shiftR` 6)
                        , [0x80 + oc Data.Bits..&. 0x3f
                        ])

   | oc <= 0xffff     = ( 0xe0 + (oc `Data.Bits.shiftR` 12)
                        , [0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ])
   | otherwise        = ( 0xf0 + (oc `Data.Bits.shiftR` 18)
                        , [0x80 + ((oc `Data.Bits.shiftR` 12) Data.Bits..&. 0x3f)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ])



type Byte = Word8

-- -----------------------------------------------------------------------------
-- The input type
















































































-- -----------------------------------------------------------------------------
-- Token positions

-- `Posn' records the location of a token in the input text.  It has three
-- fields: the address (number of chacaters preceding the token), line number
-- and column of a token within the file. `start_pos' gives the position of the
-- start of the file and `eof_pos' a standard encoding for the end of file.
-- `move_pos' calculates the new position after traversing a given character,
-- assuming the usual eight character tab stops.














-- -----------------------------------------------------------------------------
-- Monad (default and with ByteString input)

























































































































































-- -----------------------------------------------------------------------------
-- Basic wrapper


type AlexInput = (Char,[Byte],String)

alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (c,_,_) = c

-- alexScanTokens :: String -> [token]
alexScanTokens str = go ('\n',[],str)
  where go inp__@(_,_bs,s) =
          case alexScan inp__ 0 of
                AlexEOF -> []
                AlexError _ -> error "lexical error"
                AlexSkip  inp__' _ln     -> go inp__'
                AlexToken inp__' len act -> act (take len s) : go inp__'

alexGetByte :: AlexInput -> Maybe (Byte,AlexInput)
alexGetByte (c,(b:bs),s) = Just (b,(c,bs,s))
alexGetByte (_,[],[])    = Nothing
alexGetByte (_,[],(c:s)) = case utf8Encode' c of
                             (b, bs) -> Just (b, (c, bs, s))



-- -----------------------------------------------------------------------------
-- Basic wrapper, ByteString version
































-- -----------------------------------------------------------------------------
-- Posn wrapper

-- Adds text positions to the basic model.













-- -----------------------------------------------------------------------------
-- Posn wrapper, ByteString version














-- -----------------------------------------------------------------------------
-- GScan wrapper

-- For compatibility with previous versions of Alex, and because we can.














alex_tab_size :: Int
alex_tab_size = 8
alex_base :: Array Int Int
alex_base = listArray (0 :: Int, 110)
  [ -7
  , -54
  , -93
  , -92
  , -91
  , -86
  , -85
  , -104
  , -101
  , -94
  , -96
  , -83
  , -95
  , -89
  , -88
  , -87
  , -82
  , -84
  , 0
  , 20
  , -90
  , -40
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , -39
  , -38
  , 0
  , 0
  , 0
  , 0
  , 64
  , 122
  , 180
  , 238
  , 296
  , 354
  , 412
  , 0
  , 470
  , 528
  , 0
  , 0
  , 586
  , 644
  , 702
  , 760
  , 818
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 893
  , 886
  , 944
  , 1002
  , 1060
  , 1118
  , 1176
  , 1234
  , 1292
  , 1350
  , 1408
  , 1466
  , 1524
  , 1582
  , 1640
  , 1698
  , 1756
  , 1814
  , 1872
  , 1930
  , 1988
  , 2046
  , 2104
  , 2162
  , 2220
  , 2278
  , 2336
  , 2394
  , 2452
  , 2510
  , 2568
  , 2626
  , 2684
  , 2742
  , 2800
  , 2858
  , 2916
  , 2974
  , 3032
  , 3090
  , 3148
  , 3206
  , 3264
  , 3322
  , 3380
  , 3438
  , 3496
  , 3554
  , 3612
  , 3670
  , 3728
  , 3786
  , 3844
  , 3902
  ]

alex_table :: Array Int Int
alex_table = listArray (0 :: Int, 4157)
  [ 0
  , 9
  , 20
  , 18
  , 18
  , 19
  , 18
  , 33
  , 41
  , 51
  , 52
  , 17
  , 16
  , 3
  , 4
  , 5
  , 13
  , 12
  , 6
  , 11
  , 8
  , 32
  , 31
  , 30
  , 7
  , 18
  , 1
  , 15
  , 45
  , 2
  , 0
  , 0
  , 44
  , 53
  , 54
  , 23
  , 22
  , 27
  , 25
  , 0
  , 24
  , 57
  , 57
  , 57
  , 57
  , 57
  , 57
  , 57
  , 57
  , 57
  , 57
  , 0
  , 26
  , 29
  , 21
  , 28
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 96
  , 85
  , 93
  , 81
  , 87
  , 87
  , 104
  , 87
  , 87
  , 75
  , 87
  , 87
  , 87
  , 83
  , 87
  , 86
  , 89
  , 87
  , 87
  , 76
  , 87
  , 87
  , 87
  , 87
  , 55
  , 14
  , 56
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 10
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 57
  , 57
  , 57
  , 57
  , 57
  , 57
  , 57
  , 57
  , 57
  , 57
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 34
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 35
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 36
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 37
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 42
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 43
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 50
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 58
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 59
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 61
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 110
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 108
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 107
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 106
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 64
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 65
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 103
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 102
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 70
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 100
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 99
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 97
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 95
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 94
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 92
  , 87
  , 87
  , 87
  , 87
  , 87
  , 88
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 82
  , 87
  , 87
  , 91
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 79
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 80
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 90
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 84
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 78
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 77
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 98
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 74
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 72
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 71
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 101
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 69
  , 87
  , 87
  , 87
  , 73
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 68
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 67
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 66
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 105
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 63
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 62
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 60
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 49
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 109
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 48
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 47
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 46
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 40
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 39
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 87
  , 87
  , 87
  , 38
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 87
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  , 0
  ]

alex_check :: Array Int Int
alex_check = listArray (0 :: Int, 4157)
  [ -1
  , 8
  , 9
  , 10
  , 11
  , 12
  , 13
  , 61
  , 101
  , 101
  , 101
  , 97
  , 97
  , 117
  , 115
  , 111
  , 111
  , 111
  , 101
  , 108
  , 108
  , 61
  , 61
  , 61
  , 114
  , 32
  , 33
  , 121
  , 110
  , 116
  , -1
  , -1
  , 116
  , 40
  , 41
  , 42
  , 43
  , 44
  , 45
  , -1
  , 47
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , -1
  , 59
  , 60
  , 61
  , 62
  , -1
  , -1
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 123
  , 97
  , 125
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 108
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 48
  , 49
  , 50
  , 51
  , 52
  , 53
  , 54
  , 55
  , 56
  , 57
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , 65
  , 66
  , 67
  , 68
  , 69
  , 70
  , 71
  , 72
  , 73
  , 74
  , 75
  , 76
  , 77
  , 78
  , 79
  , 80
  , 81
  , 82
  , 83
  , 84
  , 85
  , 86
  , 87
  , 88
  , 89
  , 90
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , 97
  , 98
  , 99
  , 100
  , 101
  , 102
  , 103
  , 104
  , 105
  , 106
  , 107
  , 108
  , 109
  , 110
  , 111
  , 112
  , 113
  , 114
  , 115
  , 116
  , 117
  , 118
  , 119
  , 120
  , 121
  , 122
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  ]

alex_deflt :: Array Int Int
alex_deflt = listArray (0 :: Int, 110)
  [ -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  , -1
  ]

alex_accept = listArray (0 :: Int, 110)
  [ AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccNone
  , AlexAccSkip
  , AlexAccSkip
  , AlexAccSkip
  , AlexAcc 89
  , AlexAcc 88
  , AlexAcc 87
  , AlexAcc 86
  , AlexAcc 85
  , AlexAcc 84
  , AlexAcc 83
  , AlexAcc 82
  , AlexAcc 81
  , AlexAcc 80
  , AlexAcc 79
  , AlexAcc 78
  , AlexAcc 77
  , AlexAcc 76
  , AlexAcc 75
  , AlexAcc 74
  , AlexAcc 73
  , AlexAcc 72
  , AlexAcc 71
  , AlexAcc 70
  , AlexAcc 69
  , AlexAcc 68
  , AlexAcc 67
  , AlexAcc 66
  , AlexAcc 65
  , AlexAcc 64
  , AlexAcc 63
  , AlexAcc 62
  , AlexAcc 61
  , AlexAcc 60
  , AlexAcc 59
  , AlexAcc 58
  , AlexAcc 57
  , AlexAcc 56
  , AlexAcc 55
  , AlexAcc 54
  , AlexAcc 53
  , AlexAcc 52
  , AlexAcc 51
  , AlexAcc 50
  , AlexAcc 49
  , AlexAcc 48
  , AlexAcc 47
  , AlexAcc 46
  , AlexAcc 45
  , AlexAcc 44
  , AlexAcc 43
  , AlexAcc 42
  , AlexAcc 41
  , AlexAcc 40
  , AlexAcc 39
  , AlexAcc 38
  , AlexAcc 37
  , AlexAcc 36
  , AlexAcc 35
  , AlexAcc 34
  , AlexAcc 33
  , AlexAcc 32
  , AlexAcc 31
  , AlexAcc 30
  , AlexAcc 29
  , AlexAcc 28
  , AlexAcc 27
  , AlexAcc 26
  , AlexAcc 25
  , AlexAcc 24
  , AlexAcc 23
  , AlexAcc 22
  , AlexAcc 21
  , AlexAcc 20
  , AlexAcc 19
  , AlexAcc 18
  , AlexAcc 17
  , AlexAcc 16
  , AlexAcc 15
  , AlexAcc 14
  , AlexAcc 13
  , AlexAcc 12
  , AlexAcc 11
  , AlexAcc 10
  , AlexAcc 9
  , AlexAcc 8
  , AlexAcc 7
  , AlexAcc 6
  , AlexAcc 5
  , AlexAcc 4
  , AlexAcc 3
  , AlexAcc 2
  , AlexAcc 1
  , AlexAcc 0
  ]

alex_actions = array (0 :: Int, 90)
  [ (89,alex_action_1)
  , (88,alex_action_2)
  , (87,alex_action_3)
  , (86,alex_action_4)
  , (85,alex_action_5)
  , (84,alex_action_6)
  , (83,alex_action_7)
  , (82,alex_action_8)
  , (81,alex_action_9)
  , (80,alex_action_10)
  , (79,alex_action_11)
  , (78,alex_action_12)
  , (77,alex_action_13)
  , (76,alex_action_14)
  , (75,alex_action_15)
  , (74,alex_action_16)
  , (73,alex_action_17)
  , (72,alex_action_18)
  , (71,alex_action_19)
  , (70,alex_action_20)
  , (69,alex_action_21)
  , (68,alex_action_22)
  , (67,alex_action_23)
  , (66,alex_action_24)
  , (65,alex_action_25)
  , (64,alex_action_26)
  , (63,alex_action_27)
  , (62,alex_action_28)
  , (61,alex_action_29)
  , (60,alex_action_30)
  , (59,alex_action_31)
  , (58,alex_action_32)
  , (57,alex_action_33)
  , (56,alex_action_34)
  , (55,alex_action_35)
  , (54,alex_action_36)
  , (53,alex_action_37)
  , (52,alex_action_38)
  , (51,alex_action_38)
  , (50,alex_action_38)
  , (49,alex_action_38)
  , (48,alex_action_38)
  , (47,alex_action_38)
  , (46,alex_action_38)
  , (45,alex_action_38)
  , (44,alex_action_38)
  , (43,alex_action_38)
  , (42,alex_action_38)
  , (41,alex_action_38)
  , (40,alex_action_38)
  , (39,alex_action_38)
  , (38,alex_action_38)
  , (37,alex_action_38)
  , (36,alex_action_38)
  , (35,alex_action_38)
  , (34,alex_action_38)
  , (33,alex_action_38)
  , (32,alex_action_38)
  , (31,alex_action_38)
  , (30,alex_action_38)
  , (29,alex_action_38)
  , (28,alex_action_38)
  , (27,alex_action_38)
  , (26,alex_action_38)
  , (25,alex_action_38)
  , (24,alex_action_38)
  , (23,alex_action_38)
  , (22,alex_action_38)
  , (21,alex_action_38)
  , (20,alex_action_38)
  , (19,alex_action_38)
  , (18,alex_action_38)
  , (17,alex_action_38)
  , (16,alex_action_38)
  , (15,alex_action_38)
  , (14,alex_action_38)
  , (13,alex_action_38)
  , (12,alex_action_38)
  , (11,alex_action_38)
  , (10,alex_action_38)
  , (9,alex_action_38)
  , (8,alex_action_38)
  , (7,alex_action_38)
  , (6,alex_action_38)
  , (5,alex_action_38)
  , (4,alex_action_38)
  , (3,alex_action_38)
  , (2,alex_action_38)
  , (1,alex_action_38)
  , (0,alex_action_38)
  ]

{-# LINE 52 "app/Lexer.x" #-}

data Token =
    TPublic
  | TPrivate
  | TProtected
  | TClass
  | TStatic
  | TFinal
  | TInt
  | TChar
  | TByte
  | TLong
  | TDouble
  | TFloat
  | TShort
  | TBoolean
  | TVoid
  | TReturn
  | TIf
  | TElse
  | TTrue
  | TFalse
  | TPlus
  | TSub
  | TMul
  | TDiv
  | TAssign
  | TRoundOpen
  | TRoundClose
  | TCurlyOpen
  | TCurlyClose
  | TConst Integer
  | TVar String
  | TSemicolon
  | TComa
  | TGT
  | TLT
  | TLQ
  | TGQ
  | TEQ
  | TNEQ
  deriving (Show, Eq)

alex_action_1 =  \s -> TAssign           
alex_action_2 =  \s -> TPlus             
alex_action_3 =  \s -> TMul              
alex_action_4 =  \s -> TDiv              
alex_action_5 =  \s -> TSub              
alex_action_6 =  \s -> TSemicolon        
alex_action_7 =  \s -> TComa             
alex_action_8 =  \s -> TGT               
alex_action_9 =  \s -> TLT               
alex_action_10 =  \s -> TLQ               
alex_action_11 =  \s -> TGQ               
alex_action_12 =  \s -> TEQ               
alex_action_13 =  \s -> TNEQ              
alex_action_14 =  \s -> TClass            
alex_action_15 =  \s -> TStatic           
alex_action_16 =  \s -> TPrivate          
alex_action_17 =  \s -> TPublic           
alex_action_18 =  \s -> TProtected        
alex_action_19 =  \s -> TInt              
alex_action_20 =  \s -> TChar             
alex_action_21 =  \s -> TByte             
alex_action_22 =  \s -> TLong             
alex_action_23 =  \s -> TDouble           
alex_action_24 =  \s -> TFloat            
alex_action_25 =  \s -> TBoolean          
alex_action_26 =  \s -> TVoid             
alex_action_27 =  \s -> TFinal            
alex_action_28 =  \s -> TReturn           
alex_action_29 =  \s -> TIf               
alex_action_30 =  \s -> TElse             
alex_action_31 =  \s -> TTrue             
alex_action_32 =  \s -> TFalse            
alex_action_33 =  \s -> TRoundOpen        
alex_action_34 =  \s -> TRoundClose       
alex_action_35 =  \s -> TCurlyOpen        
alex_action_36 =  \s -> TCurlyClose       
alex_action_37 =  \s -> TConst (read s)   
alex_action_38 =  \s -> TVar s            
{-# LINE 1 "templates/GenericTemplate.hs" #-}
-- -----------------------------------------------------------------------------
-- ALEX TEMPLATE
--
-- This code is in the PUBLIC DOMAIN; you may copy it freely and use
-- it for any purpose whatsoever.

-- -----------------------------------------------------------------------------
-- INTERNALS and main scanner engine




































































alexIndexInt16OffAddr arr off = arr ! off
























alexIndexInt32OffAddr arr off = arr ! off











quickIndex arr i = arr ! i


-- -----------------------------------------------------------------------------
-- Main lexing routines

data AlexReturn a
  = AlexEOF
  | AlexError  !AlexInput
  | AlexSkip   !AlexInput !Int
  | AlexToken  !AlexInput !Int a

-- alexScan :: AlexInput -> StartCode -> AlexReturn a
alexScan input__ (sc)
  = alexScanUser undefined input__ (sc)

alexScanUser user__ input__ (sc)
  = case alex_scan_tkn user__ input__ (0) input__ sc AlexNone of
  (AlexNone, input__') ->
    case alexGetByte input__ of
      Nothing ->



                                   AlexEOF
      Just _ ->



                                   AlexError input__'

  (AlexLastSkip input__'' len, _) ->



    AlexSkip input__'' len

  (AlexLastAcc k input__''' len, _) ->



    AlexToken input__''' len (alex_actions ! k)


-- Push the input through the DFA, remembering the most recent accepting
-- state it encountered.

alex_scan_tkn user__ orig_input len input__ s last_acc =
  input__ `seq` -- strict in the input
  let
  new_acc = (check_accs (alex_accept `quickIndex` (s)))
  in
  new_acc `seq`
  case alexGetByte input__ of
     Nothing -> (new_acc, input__)
     Just (c, new_input) ->



      case fromIntegral c of { (ord_c) ->
        let
                base   = alexIndexInt32OffAddr alex_base s
                offset = (base + ord_c)
                check  = alexIndexInt16OffAddr alex_check offset

                new_s = if (offset >= (0)) && (check == ord_c)
                          then alexIndexInt16OffAddr alex_table offset
                          else alexIndexInt16OffAddr alex_deflt s
        in
        case new_s of
            (-1) -> (new_acc, input__)
                -- on an error, we want to keep the input *before* the
                -- character that failed, not after.
            _ -> alex_scan_tkn user__ orig_input (if c < 0x80 || c >= 0xC0 then (len + (1)) else len)
                                                -- note that the length is increased ONLY if this is the 1st byte in a char encoding)
                        new_input new_s new_acc
      }
  where
        check_accs (AlexAccNone) = last_acc
        check_accs (AlexAcc a  ) = AlexLastAcc a input__ (len)
        check_accs (AlexAccSkip) = AlexLastSkip  input__ (len)

        check_accs (AlexAccPred a predx rest)
           | predx user__ orig_input (len) input__
           = AlexLastAcc a input__ (len)
           | otherwise
           = check_accs rest
        check_accs (AlexAccSkipPred predx rest)
           | predx user__ orig_input (len) input__
           = AlexLastSkip input__ (len)
           | otherwise
           = check_accs rest


data AlexLastAcc
  = AlexNone
  | AlexLastAcc !Int !AlexInput !Int
  | AlexLastSkip     !AlexInput !Int

data AlexAcc user
  = AlexAccNone
  | AlexAcc Int
  | AlexAccSkip

  | AlexAccPred Int (AlexAccPred user) (AlexAcc user)
  | AlexAccSkipPred (AlexAccPred user) (AlexAcc user)

type AlexAccPred user = user -> AlexInput -> Int -> AlexInput -> Bool

-- -----------------------------------------------------------------------------
-- Predicates on a rule

alexAndPred p1 p2 user__ in1 len in2
  = p1 user__ in1 len in2 && p2 user__ in1 len in2

--alexPrevCharIsPred :: Char -> AlexAccPred _
alexPrevCharIs c _ input__ _ _ = c == alexInputPrevChar input__

alexPrevCharMatches f _ input__ _ _ = f (alexInputPrevChar input__)

--alexPrevCharIsOneOfPred :: Array Char Bool -> AlexAccPred _
alexPrevCharIsOneOf arr _ input__ _ _ = arr ! alexInputPrevChar input__

--alexRightContext :: Int -> AlexAccPred _
alexRightContext (sc) user__ _ _ input__ =
     case alex_scan_tkn user__ input__ (0) input__ sc AlexNone of
          (AlexNone, _) -> False
          _ -> True
        -- TODO: there's no need to find the longest
        -- match when checking the right context, just
        -- the first match will do.

